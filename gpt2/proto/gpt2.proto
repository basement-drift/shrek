syntax = "proto3";
package gpt2;

service Gpt2 {
	// Use a GPT2 model to generate text for the given prompt.
	rpc GenerateText(GenerateRequest) returns (GeneratedText);
	
	// Use a GPT2 model to generate the next line in a script for the given prompt and speaker. The
	// response will be only the next line, containing neither the prompt text nor the speaker name.
	rpc GenerateScript(ScriptRequest) returns (GeneratedText);
}

message GenerateRequest {
    // The amount of text to generate, in GPT2 tokens. This does not include the prompt, and may
    // be truncated if the total size is larger than the model supports.
	uint32 length = 1;


    // The prompt text, used as a starting point for the generation. Will not be included in the
    // response text.
	string prompt = 2;
}

message GeneratedText {
    // Text generated by the GPT2 model from a prompt.
	string text = 1;
}

message ScriptRequest {
    // The amount of text to generate, in GPT2 tokens. This does not include the prompt, and may
    // be truncated if the total size is larger than the model supports.
	uint32 length = 1;
	
	// The prompt, expected to be formatted like a script. For example:
	//     SKIN MAN: hey there
	//     SHREK: OH MY GOD LET ME OUT
	// Speaker names are not expected to have colons within them, but other special characters are
	// allowed.
	string script = 2;

	// The speaker for whom to generate the next line. Speaker names are not expected to have colons
	// within them, but other special characters are allowed.
	string next_speaker = 3;
}
